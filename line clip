/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
int xmin,xmax,ymin,ymax;
struct lineclipping{
    float x,y;
    int outcode[4];
}p1,p2;

void calculate_outcode(struct lineclipping *p){
    for(int i=0;i<4;i++){
        p->outcode[i]=0;
    }
    if(p->x<xmin){
        p->outcode[3]=1;
    }
    if(p->x>xmax){
        p->outcode[2]=1;
    }
    if(p->y<ymin){
        p->outcode[1]=1;
    }
    if(p->y>ymax){
        p->outcode[0]=1;
    }

}

void calculate(){
    float m;
    m=(float)(p2.y-p1.y)/(p2.x-p1.x);
    int flag=-1;
    float x1,y1;
    float x2,y2;
    for(int i=0;i<4;i++){
        if(p1.outcode[i]==1){
            flag=i;
        }
    }
    if (flag==-1){
        printf("\nno intersection for p1");
    }
    else{
    if(flag==3){
        x1=xmin;
        y1=p1.y+m*(x1-p1.x);
        printf("\npoint of intersection x and y are:%f\t%f",x1,y1);
    }
    else if(flag==2){
        x1=xmax;
        y1=p1.y+m*(x1-p1.x);
        printf("\npoint of intersection x and y are:%f\t%f",x1,y1);
    }
    else if(flag==1){
        y1=ymin;
        x1=p1.x+(y1-p1.y)/m;
        printf("\npoint of intersection x and y are:%f\t%f",x1,y1);
    }
     else if(flag==0){
        y1=ymax;
         x1=p1.x+(y1-p1.y)/m;
        printf("\npoint of intersection x and y are:%f\t%f",x1,y1);
    }
}
    //for p2
    flag=-1;
      for(int i=0;i<4;i++){
        if(p2.outcode[i]==1){
            flag=i;
        }
    }
    if (flag==-1){
        printf("no intersection for p2");
    }
    else{
    if(flag==3){
        x2=xmin;
        y2=p1.y+m*(x2-p1.x);
        printf("\npoint of intersection x and y are:%f\t%f",x2,y2);
    }
    else if(flag==2){
        x2=xmax;
        y2=p1.y+m*(x2-p1.x);
        printf("\npoint of intersection x and y are:%f\t%f",x2,y2);
    }
    else if(flag==1){
        y2=ymin;
        x2=p1.x+(y2 - p1.y)/m;
        printf("\npoint of intersection x and y are:%f\t%f",x2,y2);
    }
     else if(flag==0){
        y2=ymax;
         x2=p1.x+(y2-p1.y)/m;
        printf("\npoint of intersection x and y are:%f\t%f",x2,y2);
    }
}
}
void find(){
    int flag=0;
    int outcode1[4];
    for(int i=0;i<4;i++){
        outcode1[i]=p1.outcode[i]&&p2.outcode[i];
        if(outcode1[i]==1){
            flag=1;
            break;
            
        }
    }
    if(flag==1){
        printf("\ncompletely rejected");
    }
    else{
        printf("\nIt is partially accepted");
        calculate();
    }
}

void check(){
    int flag;
    for(int i=0;i<4;i++){
        if(p1.outcode[i]==0&&p2.outcode[i]==0){
            flag=0;
        }
        else{
            flag=1;
            break;
            
        }
    }
    if(flag==0){
        printf("Accepted");
        
    }
    else{
        printf("\npartially accepted or rejected");
        find();
    }
}


int main()
{
    printf("Enter the coordinates of pixel p1:");
    scanf("%f%f",&p1.x,&p1.y);
    printf("Enter the coordinates of pixel p2:");
    scanf("%f%f",&p2.x,&p2.y);
    printf("Enter Xmax ,Ymax:");
    scanf("%d%d",&xmax,&ymax);
      printf("Enter Xmin ,Ymin:");
    scanf("%d%d",&xmin,&ymin);
    calculate_outcode(&p1);
    calculate_outcode(&p2);
    printf("outcode of p1:\t%d\t%d\t%d\t%d",p1.outcode[0],p1.outcode[1],p1.outcode[2],p1.outcode[3]);
    printf("\noutcode of p2:\t%d\t%d\t%d\t%d",p2.outcode[0],p2.outcode[1],p2.outcode[2],p2.outcode[3]);
    check();
    

    return 0;
}
